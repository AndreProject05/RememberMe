package com.example.rememberme

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.core.app.NotificationCompat

class NotificationService(private val context: Context) {

    companion object {
        private const val CHANNEL_ID = "rememberme_channel"
        
        fun showListNotification(context: Context, listName: String, items: List<String>) {
            NotificationService(context).createListNotification(listName, items)
        }
        
        fun showAllListsNotification(context: Context, lists: List<RememberList>) {
            NotificationService(context).createAllListsNotification(lists)
        }
    }

    private fun createListNotification(listName: String, items: List<String>) {
        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        val notificationId = listName.hashCode()

        createNotificationChannel(notificationManager)

        // Intent per aprire l'app
        val mainIntent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }

        val mainPendingIntent = PendingIntent.getActivity(
            context,
            0,
            mainIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // Intent per eliminare la lista direttamente dalla notifica
        val deleteIntent = Intent(context, DeleteListReceiver::class.java).apply {
            putExtra("list_name", listName)
            putExtra("notification_id", notificationId)
        }

        val deletePendingIntent = PendingIntent.getBroadcast(
            context,
            notificationId,
            deleteIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val inboxStyle = NotificationCompat.InboxStyle()
        inboxStyle.setBigContentTitle("üìã $listName")

        items.take(5).forEach { item ->
            inboxStyle.addLine("‚Ä¢ $item")
        }

        if (items.size > 5) {
            inboxStyle.addLine("‚Ä¢ ... e altri ${items.size - 5} elementi")
        }

        inboxStyle.setSummaryText("${items.size} elementi da ricordare")

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle(listName)
            .setContentText("${items.size} elementi - Tocca per aprire")
            .setStyle(inboxStyle)
            .setContentIntent(mainPendingIntent)
            .setAutoCancel(false) // ‚ö†Ô∏è IMPORTANTE: non chiudere automaticamente
            .setOngoing(true)     // ‚ö†Ô∏è IMPORTANTE: notifica persistente
            .setOnlyAlertOnce(true)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            // Aggiungi azione per eliminare direttamente dalla notifica
            .addAction(
                android.R.drawable.ic_delete,
                "Elimina Lista",
                deletePendingIntent
            )
            .build()

        notificationManager.notify(notificationId, notification)
    }
    
    private fun createAllListsNotification(lists: List<RememberList>) {
        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        createNotificationChannel(notificationManager)

        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val totalItems = lists.sumOf { it.items.size }
        
        val inboxStyle = NotificationCompat.InboxStyle()
        inboxStyle.setBigContentTitle("üìã Le tue liste")
        
        lists.take(3).forEach { list ->
            inboxStyle.addLine("‚Ä¢ ${list.name}: ${list.items.size} elementi")
        }
        
        if (lists.size > 3) {
            inboxStyle.addLine("‚Ä¢ ... e altre ${lists.size - 3} liste")
        }
        
        inboxStyle.setSummaryText("${lists.size} liste, $totalItems elementi totali")

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle("RememberMe - Le tue liste")
            .setContentText("${lists.size} liste attive - Tocca per aprire")
            .setStyle(inboxStyle)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .build()

        notificationManager.notify(1, notification)
    }

    fun showDeletionConfirmation(listName: String) {
        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle("Lista eliminata")
            .setContentText("'$listName' √® stata eliminata")
            .setAutoCancel(true)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .build()
        
        notificationManager.notify(System.currentTimeMillis().toInt(), notification)
    }

    private fun createNotificationChannel(notificationManager: NotificationManager) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "RememberMe Notifications",
                NotificationManager.IMPORTANCE_HIGH  // Cambiato a HIGH per notifiche persistenti
            ).apply {
                description = "Notifiche per le liste della spesa e promemoria"
                lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC
            }
            notificationManager.createNotificationChannel(channel)
        }
    }
}
